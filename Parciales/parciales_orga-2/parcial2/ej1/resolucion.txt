------------------------------------------------------------------------------------
Construir un conjunto de segmentos y un mapa de paginación (un solo directorio y varias tablas de
página), tal que las siguientes traducciones sean válidas:

          Lógica        Lineal    Física      Acción
    0x0050:0x0043534A 0x99912311 0x99912311 Leer código
    0x0040:0x9993252A 0x9993252A 0x0000052A Ejecutar código
    0x0030:0x0000011A 0x00999FFF 0x88462FFF Leer Datos
    0x0020:0x003993AA 0x003993AA 0x000003AB Escribir Datos

Si no es posible completar alguna traducción, justificar, dejando clara cuál es la razón por la
cual no es posible realizar dicha traducción. Por simplicidad considerar que todas las traducciones
corresponden a acciones realizadas en nivel cero de exactamente 4 bytes

------------------------------------------------------------------------------------

Segmentacion: 
    Selectores de segmento:
    Estos selectores de segmento se dividen en dos partes, los primeros 3 bits que describen el TI y el DPL de la tarea(si es un descriptor global o local y el nivel de privilegio respectivamente)
        0x0050 --> | 0101 0 | 000 --> INDICE 10 - TI 0 - RPL 00
        0x0040 --> | 0100 0 | 000 --> INDICE 8 - TI 0  - RPL 00
        0x0030 --> | 0011 0 | 000 --> INDICE 6 - TI 0  - RPL 00
        0x0020 --> | 0010 0 | 000 --> INDICE 4 - TI 0  - RPL 00

    La base del cada segmento la calcularemos restando el offset indicado en la direccion logica, dado que se nos muestra a que direccion
    lineal mapea dicha logica, restando el offset a la lineal podemos obtener la base del segmento

    El limite de cada segmento lo calcularemos de modo que el tamaño se el minimo necesario para acceder a la posicion de memoria que nos indican, por lo que es el offset + el tamaño de la accion - 1
    el -1 es para acceder a [offset + 3], ya que si tratamos de acceder a [offset + 4] estaríamos leyendo el 5to byte desde el offset y el límite describe el último byte al que deberíamos poder acceder


    Segmento INDICE = 10:
        - BASE = LINEAL - OFFSET
          BASE = 0x99912311 - 0x0043534A = 0x994DCFC7
        
        - LIMIT = OFFSET + TAMAÑO DE LA ACCION - 1
          LIMIT = 0x0043534A + 0x4 - 1 = 0x43534D
    
    Segmento INDICE = 8:
        - BASE = LINEAL - OFFSET
          BASE = 0x9993252A - 0x9993252A = 0x0
        
        - LIMIT = OFFSET + TAMAÑO DE LA ACCION - 1
          LIMIT = 0x9993252A + 0x4 - 1 = 0x9993252D

    Segmento INDICE = 6:
        - BASE = LINEAL - OFFSET
          BASE = 0x00999FFF - 0x0000011A = 0x999EE5
        
        - LIMIT = OFFSET + TAMAÑO DE LA ACCION - 1
          LIMIT = 0x0000011A + 0x4 - 1 = 0x11D
    
    Segmento INDICE = 4:
        - BASE = LINEAL - OFFSET
          BASE = 0x003993AA - 0x003993AA = 0x0
        
        - LIMIT = OFFSET + TAMAÑO DE LA ACCION - 1
          LIMIT = 0x003993AA + 0x4 - 1 = 0x3993AD

| Indice |  Base      |   Limite   |  P  | DPL |  S  |  D/B | L | G | Tipo
|  0x0A  | 0x994DCFC7 |  0x43534D  |  1  |  0  |  1  |   1  | 0 | 0 | 0xA (Code, read/execute)
|  0x08  | 0x00000000 | 0x9993252D |  1  |  0  |  1  |   1  | 0 | 0 | 0x8 (Code, execute)
|  0x06  | 0x999EE5   |   0x11D    |  1  |  0  |  1  |   1  | 0 | 0 | 0x0 (Data, read-only)
|  0x04  | 0x00000000 |  0x3993AD  |  1  |  0  |  1  |   1  | 0 | 0 | 0x2 (Data, read/write)


Paginación:
    
    DIRECCION LINEAL: 31 | DIRECTORY 22 | TABLE 12 | OFFSET 0

    0x99912311 : 266 | 112 | 311 
    0x9993252A : 266 | 132 | 52A
    0x00999FFF : 002 | 199 | FFF
    0x003993AA : 000 | 399 | 3AA

    Rango Lineal             |      Rango Fisico        R/W U/S  P
    0x99912000 - 0x99912FFF -> 0x99912000 - 0x99912FFF | 0 | 0 | 1
    0x99932000 - 0x99932FFF -> 0x00000000 - 0x00000FFF | 0 | 0 | 1 
    0x00999000 - 0x00999FFF -> 0x88462000 - 0x88462FFF | 0 | 0 | 1
    0x00399000 - 0x00399FFF -> 0x00000000 - 0x00000FFF | 1 | 0 | 1

----------------------------------------------------------------------

    Page Directory  |  Table    |  RW  |  US  |  P  |
          000           PT1        1      0      1
          ...           ...
          002           PT2        0      0      1
          ...           ...
          266           PT3        0      0      1

----------------------------------------------------------------------

          PT1      |      Physical Address      |  RW  |  US  |  P  |
          399                   0x00000            1      0      1

----------------------------------------------------------------------

          PT2      |      Physical Address      |  RW  |  US  |  P  |
          199                   0x88462             0      0     1

----------------------------------------------------------------------

          PT3      |      Physical Address    |  RW  |  US  |  P  |
          112                 0x99912            0      0      1
          ...                   ...
          ...                   ...
          132                 0x00000            0      0      1 